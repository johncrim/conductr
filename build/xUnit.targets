<!--
***********************************************************************************************
xUnit.targets

Provides unit test build functionality using xunit.
***********************************************************************************************
-->

<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<xUnitVersion Condition=" $(xUnitVersion) == '' ">1.9.2</xUnitVersion>
		<xUnitRunnerAssembly Condition=" $(xUnitRunnerAssembly) == '' ">$(PackagesDir)\xunit.$(xUnitVersion)\lib\net20\xunit.runner.msbuild.dll</xUnitRunnerAssembly>
		<!-- Use msbuild ... /p:xUnitVerbose=true for Verbose test output-->
		<!-- Use msbuild ... /p:ContinueOnxUnitFailures=true to continue the build even when tests fail. -->
		<xUnitVerbose Condition=" $(XUnitVerbose) == '' ">False</xUnitVerbose>
		<ContinueOnxUnitFailures Condition=" $(ContinueOnxUnitFailures) == '' ">False</ContinueOnxUnitFailures>
	</PropertyGroup>

	<UsingTask AssemblyFile="$(xUnitRunnerAssembly)"
			TaskName="Xunit.Runner.MSBuild.xunit" />
	
	<!-- msbuild /t:Test [/p:xUnitVerbose][/p:ContinueOnxUnitFailures]
	
	Runs all tests in the current target assembly.
	-->
	<Target Name="Test">
		<PropertyGroup>
			<xUnitLib>$(TargetDir)\xunit.dll</xUnitLib>
		</PropertyGroup>
		
		<!-- Run build if $(TargetPath) doesn't exist; if it does exist, don't rebuild automatically.
		In other words, tests are re-run on old builds. If you want a build, specify both targets, eg msbuild /t:build,test
		-->
		<CallTarget Targets="build" Condition=" !Exists('$(TargetPath)') " />
		
		<!-- After a build, xunit.dll must be in the TargetDir.  If not, tests can't be run. -->
		<Error Condition=" !Exists('$(xUnitLib)') " Text="Unit tests cannot be run without a NuGet dependency on xUnit." />

		<!-- It seems that *.xunit config files are not currently used by the MSBuild task
		<ItemGroup>
			<XUnitConfigFile Include="$(MSBuildProjectDirectory)*.xunit" />
		</ItemGroup> -->

		<xunit Assembly="$(TargetPath)" Verbose="$(xUnitVerbose)" ContinueOnError="$(ContinueOnxUnitFailures)" />

	</Target>

</Project>